// Test end to end
// There will be a couple of logging errors, as the tests will complete before logging finishes. 
// If the test fails an error message (string) is returned.
describe("Full pipeline test", () => {
    it("Pipeline should run, not return a  value", () => {
        
        //baseline endpoint
        const endpoint = "weather?"
        
        // Create URL
        const webUrl = createOpenWeatherUrl(endpoint)

        // Get weather data
        getWeatherData(webUrl)
            .then(result => {
                
            // parse data - finish extraction
            const payload = parseData(result)

            test("Validate Payload was parsed properly", () => {
                // get response code from API call
                expect(validateJson(payload, openWeatherSchema)).rejects.toEqual(0)

            })

            test("Validate that the data was written successfully", () => {
                // write data
                expect(writeData(payload)).toEqual(0)

            })
    })
  })

})


// Bad endpoint/API call - validating that it's caught and error message sent
// Will show an error in console, but shows as passed in the final stats 
describe("API Call - Exception Handling Test", () => {
    it("API Call Should Fail and return error message", async () => {
        
        // Create URL
        const webUrl = createOpenWeatherUrl("?cheese")

        // define message 
        const message = {"message": "Request failed with status code 401",
        "status": {}}

        // attempt API call
        const result = await getWeatherData(webUrl)

        // validate response
        expect(result).toMatchObject(message);

    });

  });



// Validate sending bad data for validation 
describe("Validate data format", () => {
    it("Data format validation should fail", () => {
        
        // define bad data payload
        const badData = {
            "c": 378.85,
            "d": 2.7, 
            "dp": -1.006, 
            "h": 384.3, 
            "l": 377.44, 
            "o": 383.76, 
            "pc": 382.7, 
            "t": 170129160
        }

        // check the data
        const response = validateJson(badData, openWeatherSchema )

        // validate response
        expect(response).toEqual(1)

    })

});


// Validate sending Slack Alert
// This verifies that the proper env var is loaded for the Slack webbhook
// beyond that, you will need to check your Slack channel to verify that
// the message has gone through. 
describe("Test Slack Alerts", () => {
    it("Slack Alert Sent Successfully", async () => {

    // expect.assertions(1)
    
    const message = "Test Slack Alert"

    const response = await sendSlackAlerts(message, config.webHookUrl)
    expect(response).toEqual(200)

    })

});
