auth:
  existingSecret: ''
  fernetKey: '<insert your key here>'
  password: ''
  secretKey: ''
  username: markham
clusterDomain: cluster.local
commonAnnotations: {}
commonLabels: {}
configuration: ''
dags:
  existingConfigmap: ''
  image:
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets:
      - dockersecrets
    registry: docker.io
    repository: bitnami/os-shell
    tag: 11-debian-11-r96
diagnosticMode:
  args:
    - infinity
  command:
    - sleep
  enabled: false
executor: CeleryExecutor 
existingConfigmap: ''
externalDatabase:
  database: bitnami_airflow
  existingSecret: ''
  existingSecretPasswordKey: ''
  host: localhost
  password: ''
  port: 5432
  user: bn_airflow
externalRedis:
  existingSecret: ''
  existingSecretPasswordKey: ''
  host: localhost
  password: ''
  port: 6379
  username: ''
extraDeploy: []
extraEnvVars: []
extraEnvVarsCM: ''
extraEnvVarsSecret: github-personal-token
extraEnvVarsSecrets: []
extraVolumeMounts: []
extraVolumes: []
fullnameOverride: ''
git:
  clone:
    args: []
    command: []
    extraEnvVars: []
    extraEnvVarsCM: ''
    extraEnvVarsSecret: github-personal-token
    extraVolumeMounts: []
    resources: {}
    resourcesPreset: none
  dags:
    enabled: true
    repositories:
      - branch: main
        name: pdashdags
        path: /dags
        repository: https://MarkhamLee:${GITHUB_PAT}@github.com/MarkhamLee/pdashdags.git
  image:
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets:
      - dockersecrets
    registry: docker.io
    repository: bitnami/git
    tag: 2.43.0-debian-11-r9
  plugins:
    enabled: false
    repositories:
      - branch: ''
        name: ''
        path: ''
        repository: ''
  sync:
    args: []
    command: []
    extraEnvVars: []
    extraEnvVarsCM: ''
    extraEnvVarsSecret: github-personal-token
    extraVolumeMounts: []
    interval: 300
    resources: {}
    resourcesPreset: none
global:
  imagePullSecrets:
    - dockersecrets
  imageRegistry: docker.io
  storageClass: ''
  cattle:
    systemProjectId: p-6scsz
ingress:
  annotations: {}
  apiVersion: ''
  enabled: false
  extraHosts: []
  extraPaths: []
  extraRules: []
  extraTls: []
  hostname: airflow.local
  ingressClassName: ''
  path: /
  pathType: ImplementationSpecific
  secrets: []
  selfSigned: false
  tls: false
initContainers: []
kubeVersion: ''
ldap:
  basedn: dc=example,dc=org
  binddn: cn=admin,dc=example,dc=org
  bindpw: ''
  enabled: false
  rolesMapping: >-
    { "cn=All,ou=Groups,dc=example,dc=org": ["User"],
    "cn=Admins,ou=Groups,dc=example,dc=org": ["Admin"], }
  rolesSyncAtLogin: 'True'
  searchAttribute: cn
  tls:
    CAFilename: ''
    allowSelfSigned: true
    certificatesMountPath: /opt/bitnami/airflow/conf/certs
    certificatesSecret: ''
    enabled: false
  uri: ldap://ldap_server:389
  userRegistration: 'True'
  userRegistrationRole: Public
loadExamples: false
metrics:
  affinity: {}
  automountServiceAccountToken: false
  containerPorts:
    http: 9112
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    enabled: true
    privileged: false
    runAsNonRoot: true
    runAsUser: 1001
    seLinuxOptions: null
    seccompProfile:
      type: RuntimeDefault
  enabled: false
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  hostAliases: []
  image:
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/airflow-exporter
    tag: 0.20220314.0-debian-11-r448
  lifecycleHooks: {}
  networkPolicy:
    allowExternal: true
    allowExternalEgress: true
    enabled: true
    extraEgress: []
    extraIngress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  # note: this is only for Airflow components, the pods with DAGs/containers can still run on non amd64 nodes
  nodeAffinityPreset:  
    key: kubernetes.io/arch
    type: amd64 # this is to ensure that k8s isn't deployed on the lower powered arm64 devices
    values: []
  nodeSelector: {}
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    fsGroupChangePolicy: Always
    supplementalGroups: []
    sysctls: []
  resources: {}
  resourcesPreset: none
  schedulerName: ''
  service:
    annotations:
      prometheus.io/port: '{{ .Values.metrics.service.ports.http }}'
      prometheus.io/scrape: 'true'
    clusterIP: ''
    ports:
      http: 9112
    sessionAffinity: None
  serviceMonitor:
    enabled: false
    honorLabels: false
    interval: ''
    jobLabel: ''
    labels: {}
    metricRelabelings: []
    namespace: ''
    relabelings: []
    scrapeTimeout: ''
    selector: {}
  tolerations: []
nameOverride: ''
postgresql:
  architecture: standalone
  auth:
    database: bitnami_airflow
    enablePostgresUser: true
    existingSecret: ''
    password: ''
    username: bn_airflow
  enabled: true
rbac:
  create: true
  rules: []
redis:
  architecture: standalone
  auth:
    enabled: true
    existingSecret: ''
    password: ''
  enabled: true
scheduler:
  affinity: {}
  args: []
  automountServiceAccountToken: true
  command: []
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    enabled: true
    privileged: false
    runAsNonRoot: true
    runAsUser: 1001
    seLinuxOptions: null
    seccompProfile:
      type: RuntimeDefault
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraEnvVarsSecrets: []
  extraVolumeMounts:
    - mountPath: /bitnami/python/requirements.txt
      name: requirements
  extraVolumes:
    - configMap:
        name: requirements
      name: requirements
  hostAliases: []
  image:
    debug: false
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/airflow-scheduler
    tag: 2.8.1-debian-11-r4
  initContainers: []
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 180
    periodSeconds: 20
    successThreshold: 1
    timeoutSeconds: 5
  networkPolicy:
    allowExternal: true
    allowExternalEgress: true
    enabled: true
    extraEgress: []
    extraIngress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  nodeAffinityPreset:
    key: kubernetes.io/arch
    type: amd64
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ''
    minAvailable: 1
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    fsGroupChangePolicy: Always
    supplementalGroups: []
    sysctls: []
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 3
  resources: {}
  resourcesPreset: none
  schedulerName: ''
  sidecars: []
  terminationGracePeriodSeconds: ''
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
service:
  annotations: {}
  clusterIP: ''
  externalTrafficPolicy: Cluster
  extraPorts: []
  loadBalancerIP: ''
  loadBalancerSourceRanges: []
  nodePorts:
    http: ''
  ports:
    http: 8080
  sessionAffinity: None
  sessionAffinityConfig: {}
  type: ClusterIP
serviceAccount:
  annotations: {}
  automountServiceAccountToken: true
  create: true
  name: ''
sidecars: []
web:
  affinity: {}
  args: []
  automountServiceAccountToken: false
  baseUrl: ''
  command: []
  containerPorts:
    http: 8080
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    enabled: true
    privileged: false
    runAsNonRoot: true
    runAsUser: 1001
    seLinuxOptions: null
    seccompProfile:
      type: RuntimeDefault
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  existingConfigmap: ''
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraEnvVarsSecrets: []
  extraVolumeMounts:
    - mountPath: /bitnami/python/requirements.txt
      name: requirements
  extraVolumes:
    - configMap:
        name: requirements
      name: requirements
  hostAliases: []
  image:
    debug: false
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/airflow
    tag: 2.8.1-debian-11-r4
  initContainers: []
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 180
    periodSeconds: 20
    successThreshold: 1
    timeoutSeconds: 5
  networkPolicy:
    allowExternal: true
    allowExternalEgress: true
    enabled: true
    extraEgress: []
    extraIngress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  nodeAffinityPreset:
    key: kubernetes.io/arch
    type: amd64
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ''
    minAvailable: 1
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    fsGroupChangePolicy: Always
    supplementalGroups: []
    sysctls: []
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 3
  resources: {}
  resourcesPreset: none
  schedulerName: ''
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  terminationGracePeriodSeconds: ''
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
worker:
  affinity: {}
  args: []
  automountServiceAccountToken: true
  autoscaling:
    enabled: false
    maxReplicas: 3
    minReplicas: 3
    targetCPU: 80
    targetMemory: 80
  command: []
  containerPorts:
    http: 8793
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    enabled: true
    privileged: false
    runAsNonRoot: true
    runAsUser: 1001
    seLinuxOptions: null
    seccompProfile:
      type: RuntimeDefault
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  extraEnvVars: []
  extraEnvVarsCM: ''
  extraEnvVarsSecret: ''
  extraEnvVarsSecrets: []
  extraVolumeClaimTemplates: []
  extraVolumeMounts:
    - mountPath: /bitnami/python/requirements.txt
      name: requirements
  extraVolumes:
    - configMap:
        name: requirements
      name: requirements
  hostAliases: []
  image:
    debug: false
    digest: ''
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/airflow-worker
    tag: 2.8.1-debian-11-r4
  initContainers: []
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 180
    periodSeconds: 20
    successThreshold: 1
    timeoutSeconds: 5
  networkPolicy:
    allowExternal: true
    allowExternalEgress: true
    enabled: true
    extraEgress: []
    extraIngress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  nodeAffinityPreset:
    key: kubernetes.io/arch
    type: amd64
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ''
    minAvailable: 1
  podAffinityPreset: ''
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    fsGroupChangePolicy: Always
    supplementalGroups: []
    sysctls: []
  podTemplate: {}
  priorityClassName: ''
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources: {}
  resourcesPreset: none
  schedulerName: ''
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  terminationGracePeriodSeconds: ''
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
